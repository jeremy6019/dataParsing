34일차(cho)

** Maven

- 외부 라이브러리 관리와 빌드를 수행해주는 도구
- pom.xml 이라는 파일을 이용해서 프로젝트를 관리

1. repositories : 라이브러리를 직접 다운로드 받을 URL을 설정하는 태그로 작성하지 않으면 중앙 저장소에서 다운로드

2. dependencies : 다운로드 받아서 사용할 라이브러리를 설정하는 태그
여기에 작성하면 먼저 로컬에 있는 .m2라는 디렉토리에서 찾아보고 있으면 사용하고
없으면 중앙저장소나 repositories 태그에 설정된 곳에서 다운로드 받아서 .m2에 저장하고 사용

=> 이클립스에서는 처음부터 Maven프로젝트를 생성해서 사용할 수 있고 기존 프로젝트를 Maven 프로젝트로
변환해서 사용할 수 있습니다.

=> 프로젝트를 변환할 때는 프로젝트를 선택하고 마우스 오른쪽 클릭해서 [Configure] - [Convert to Maven Project]

3. MySQL 드라이버 클래스를 로드하는 클래스를 생성

package com.naver.choch92.externallibrary;
public class MySQLLoad {
	public static void main(String[] args) {
		try {
			Class.forName("com.mysql.jdbc.Driver");
			System.out.printf("드라이버 클래스 로드 성공\n");
		}catch(Exception e) {
			System.out.printf("%s\n", e.getMessage());
			e.printStackTrace();
		}
	}
}

4. 프로젝트를 Maven 프로젝트로 변환

5. pom.xml 파일에 Dependency를 설정

- www.mvnrepository.com에 접속해서 mysql -> 5.1.48 Click하면 Maven코드 복사
  <dependencies>
  	<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
	<dependency>
     <groupId>mysql</groupId>
   	 <artifactId>mysql-connector-java</artifactId>
     <version>5.1.48</version>
	</dependency>
  </dependencies>

6. 플러그인 오류 나는 경우에는 아래 코드를 추가

	<dependency>
		<groupId>org.apache.maven.plugins</groupId>
		<artifactId>maven-resources-plugin</artifactId>
		<version>2.4.3</version>
	</dependency>

7. 프로젝트를 선택하고 마우스 오른쪽을 클릭하고 [Run As] - [Maven Install]

8. 프로젝트를 선택하고 [새로고침 - F5]

9. 프로젝트를 선택하고 마우스 오른쪽을 클릭하고 [Maven] - [Update Project]

** 다운로드가 안되는 경우 다른 컴퓨터에서 복사해서 사용 가능

- 사용자계정/.m2 디렉토리에 있습니다.
- Mac에서는 숨김파일로 만들어져 있으므로 Command + Shift + . 을 눌러서 숨김파일을 보이도록 하고 복사

** Maven 명령 - 마우스 오른쪽 클릭하고 [Run As]

1. Maven Build : 빌드를 수행

2. Maven Install : 애플리케이션을 실행 가능한 상태로 만들어서 다른 애플리케이션이 참조할 수 있도록 해주는 것

3. Maven Clean : 이전에 빌드한 내용을 삭제

- 실무 프로젝트를 할 때는 Build 나 Install 하기 전에 Maven Clean을 해야 합니다.

** 중앙 저장소에 라이브러리가 없는 경우

- 이경우에는 repositories에 repository라는 태그를 추가해서 다운로드 받을 URL을 직접 설정해 주어야 합니다.
- 실무 프로젝트에서는 대부분 저장소가 설정되어 있습니다.
- 대기업이나 공공기관은 오픈소스라 하더라도 무조건 사용하지 않습니다.
- WAS(Web Application Server) 중에서 Tomcat은 오픈소스이고 티맥스의 제우스는 상용화 되어 있는 제품입니다.
- 공공기관은 Tomcat을 사용하지 않고 티맥스의 제우스를 많이 사용합니다.
- 오픈소스는 유지보수를 직접 해야 합니다.

** JavaDoc

- 자바 문서를 만들어주는 기능
- 문서로 만들고자 하는 내용은  /** 내용 */ 기술
- 문서 생성은 [project] - [generate javadoc]
package com.naver.choch92.externallibrary;
/**
 * 
 * @author 조<br/>창훈
 * Maven으로 MySQL 드라이버를 다운로드 받는 연습
 * 
 */
public class MySQLLoad {

	public static void main(String[] args) {
		try {
			Class.forName("com.mysql.jdbc.Driver");
			System.out.printf("드라이버 클래스 로드 성공\n");
		}catch(Exception e) {
			System.out.printf("%s\n", e.getMessage());
			e.printStackTrace();
		}
	}
}

** Checkstyle, FindBugs(SpotBugs)

- Checkstyle은 코딩을 할 때 이상한 코드가 없는지 확인해주는 라이브러리
- FindBugs는 자주 발생하는 에러를 체크해주는 라이브러리

1. 설치

- Eclipse의 MarketPlace에서 플러그 인 형태로 설치
- [Help] - [Eclipse MarketPlace]를 실행하고 Checkstyle을 검색

2. 사용

- 프로젝트를 선택하고 마우스 오른쪽을 클릭해서 [Properties]를 실행
- 왼쪽 창에서 checkstyle을 선택하고 오른쪽 창에 생긴 Checkstyle에서 왼쪽 두개 체크하고 Apply and Close

** JUnit

- 단위 테스트를 위한 라이브러리
- TDD(Test Driven Development - 테스트 주도 개발)
- 예전에는 애플리케이션을 완성하고 테스트를 했지만 지금은 테스트 하면서 애플리케이션을 만드는 것을 권장

1. JUnit 설치

- 프로젝트를 선택하고 마우스 오른쪽 클릭해서 [Properties]를 클릭
- Java Build Path에서 Library탭을 선택하고 [Add Library] 버튼을 클릭
- JUnit을 선택

2. 테스트 방법

1) TestCase 클래스로부터 상속받는 클래스를 생성하는 방법

- 내부에 만든 모든 메소드를 실행시켜서 테스트 합니다.

2) 테스트 하고자 하는 메소드 위에 @Test라는 어노테이션을 추가하는 방법

- @Test가 붙은 메소드만 실행해서 테스트

3. Assert.assertEquals 나 assertThat 이라는 메소드에 첫번째 매개변수로 메소드의 수행결과를 대입하고
두번째 매개변수로 기대값을 대입하면 양쪽의 값이 같은 경우에는 AssertionError라는 예외가 발생

4. 테스트 수행을 할 메소드가 있는 클래스 생성
package com.naver.choch92.externallibrary;
public class Sample {
	public int add(int n1, int n2) {
		return n1 + n2;
	}
	public int minus(int n1, int n2) {
		return n1 - n2;
	}
}

5. 테스트 클래스 만들기

- TestCase로 부터 상속받는 클래스 생성
package com.naver.choch92.externallibrary;
import junit.framework.TestCase;
public class SampleTest extends TestCase {
	public void test1() {
		System.out.printf("덧셈 : %d\n", new Sample().add(100, 300));
	}
	public void test2() {
		System.out.printf("뺄셈 : %d\n", new Sample().minus(100, 300));
	}
}
결과)
덧셈 : 400
뺄셈 : -200

6. 일반 클래스를 만들고 테스트

- 테스트하고자 하는 메소드 위에 @Test라는 어노테이션을 추가하면 됩니다.
package com.naver.choch92.externallibrary;
import org.junit.Test;
public class GenericTestClass {
	@Test
	public void test1() {
		System.out.printf("덧셈 : %d\n", new Sample().add(100, 300));
	}
	// @Test가 없어서 수행되지 않음
	public void test2() {
		System.out.printf("뺄셈 : %d\n", new Sample().minus(100, 300));
	}
}
결과)
덧셈 : 400

7. 테스트를 실행

- 마우스 오른쪽을 클릭하고 [Run As] - [JUnit test]
- TestCase로 부터 상속받는 클래스를 이용하면 모든 메소드가 다 수행됩니다.

8. test1 메소드를 수정

package com.naver.choch92.externallibrary;
import org.junit.Test;
import junit.framework.Assert;
public class GenericTestClass {
	@Test
	public void test1() {
		// 메소드의 수행결과가 400이면 메시지가 없음, 메소드의 수행결과가 400이 아니면 예외가 발생
		Assert.assertEquals(new Sample().add(100, 300), 400);
	}
}

9. 에러

1) 물리적 오류 : 문법이 맞지 않게 코드를 만들어서 실행되지 않는 경우
=> 이 경우에는 코드를 수정해서 문법에 맞게 만들어야 합니다.

2) 논리적 오류 : 문법에 맞게 작성이 되서 실행은 되지만 결과가 잘못나오는 경우
=> 이 경우도 코드를 수정해야 하지만 먼저 디버깅을 해서 잘못된 코드를 찾아야 합니다.

3) 예외(Exception) : 문법에 맞게 작성되서 실행은 되지만 실행 도중 문제가 발생해서 실행이 중단되는 경우
=> 이경우에도 예외가 발생한 지점을 찾고 디버깅을 수행해서 코드를 수정하거나 예외처리를 해서 해결
 
4) 단언(Assertion) : 코드가 정상적으로 동작을 하는데 조건을 설정해서 강제로 예외를 발생시키는 것으로
프로그램이 실행되면 안되는 조건을 만들어서 강제로 프로그램을 종료시키고자 할 때 사용합니다.
=> 해킹이 발생할 수 있는 포트가 열려 있다면 프로그램은 종료되어야 합니다.
=> 운영체제 버전이 맞지 않으면 프로그램을 실행시킬 수 없도록 할 때 사용합니다.

** 데이터의 표현

1. 데이터의 종류

1) HTML(Hyper Text Markup Language)

- html은 데이터를 웹 브라우저에 출력하기 위한 형식으로 태그는 이미 기능이 정해져 있어서 우리가 원하는 대로
편집할 수 없어서  데이터로 취급하지 않았는데 최근에는 html도 하나의 데이터로 취급
- 웹브라우저에서만 볼수 있고, 수정이 불가

2) CSV(Comma Separated Values)

- 콤마로 구분한 문자열 데이터
- 최근에는 콤마 뿐 아니라 공백 또는 Enter, Tab등을 사용하기도 합니다.
- 변하지 않는 데이터를 제공하고자 할 때 사용

3) XML(eXtensible Markup Language)

- 태그의 기능을 원하는 대로 만들 수 있도록 해주는 마크업 언어
- 웹에서 실시간으로 변경되는 서버의 데이터를 전달하는 용도로 많이 사용 - RSS
- 프로젝트 설정에 많이 이용

4) JSON(JavaScript Object Notation)

- 자바 스크립트의 객체 표현법을 이용해서 데이터를 표현하는 방식
- XML 보다 데이터의 크기가 작습니다.
- 용도는 XML과 같지만 실시간으로 자주 데이터를 전송해야 하는 경우는 JSON을 많이 이용합니다.
- 스마트 폰에서 보내지는 푸시 메시지가 JSON으로 되어 있습니다.
- 최근에는 설정 파일들도 XML 보다는 JSON을 선호합니다.
- Android Studio나 Atom 같은 IDE 들은 설정에도 JSON을 사용합니다.

2. Open API

- 데이터나 라이브러리를 다른 개발자가 사용할 수 있도록 만든 것

3. Restful

- 데이터를 소유하고 있는 곳에서 화면을 만들어주지 않고 데이터를 제공하는 것
- 개발자들이 데이터를 가져다가 필요한 부분만 추출해서 사용할 수 있도록 하는 것

** CSV 읽기

- CSV는 콤마 또는 다른 구분자로 구분된 문자열 입니다.
- 확장자는 파일의 종류를 알려주기 위해서 사용하는 문자열이지 확장자 때문에 파일 형식이 정해지지는 않습니다.
- 일반적으로 csv라는 확장자를 갖지만 그 이외의 확장자를 가질 수도 있습니다.
- 보통의 경우 csv 파일을 읽을 때는 줄 단위로 읽어서 split 메소드를 이용해서 분할하면 되지만 코드가 복잡해질
가능성이 있습니다.
- 첫번째 줄이 데이터인지 아니면 행의 이름인지 확인도 해야하고 모든 데이터가 균등하게 있는지 그리고 자바 객체에
어떻게 담을 것인지 등을 고려해야 합니다.
- 이러한 작업을 편리하게 하도록 해주는 라이브러리가 supercsv라이브러리 입니다.

실습) 외부 라이브러리를 사용하지 않고 읽어서 저장하기

1. CSV 형식의 파일 만들기 - 현재 디렉토리에 volley.csv로 저장

name,age,birthday
문채원,32,1986-11-13
한효주,32,1987-02-22
박보영,29,1990-02-12
아이유,26,1993-05-16

2. 프로젝트의 이름과 나이를 저장할 수 있는 DTO 클래스를 생성
package com.naver.choch92.csv;
import java.util.Date;
public class Player {
	private String name;
	private int age;
	private Date birthday;
	public String getName() {return name;}
	public void setName(String name) {this.name = name;}
	public int getAge() {return age;}
	public void setAge(int age) {this.age = age;}
	public Date getBirthday() {return birthday;}
	public void setBirthday(Date birthday) {this.birthday = birthday;}
	@Override
	public String toString() {
		return "Player [name=" + name + ", age=" + age + ", birthday=" + birthday + "]";
	}
	public Player(String name, int age, Date birthday) {
		super();
		this.name = name;
		this.age = age;
		this.birthday = birthday;
	}
	public Player() {
		super();
	}
}

3. 파일의 내용을 읽어서 DTO의 List로 만든 후 출력
package com.naver.choch92.csv;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
public class NoLibraryMain {
	public static void main(String[] args) {
		// 파일의 내용을 문자열로 읽기 위한 스트림을 생성
		try(BufferedReader br = new BufferedReader(
				new InputStreamReader(
						new FileInputStream("./volley.csv")))){
			// 데이터를 저장할 리스트
			List<Player> list = new ArrayList<>();
			// 첫째줄은 데이터로 사용하지 않기 위해서 만든 변수
			boolean flag = false;
			// 줄 단위로 읽기
			while(true) {
				String line = br.readLine();
				if(line == null) {
					break;
				}
				// 첫번째줄 줄의 데이터는 파싱하지 않음
				if(flag == false) {
					flag = true;
					continue;
				}
				// 한 줄을 읽어서 ,로 분할
				String [] ar = line.split(",");
				// 한 줄의 데이터를 저장할 객체를 생성
				Player player = new Player();
				player.setName(ar[0]);
				player.setAge(Integer.parseInt(ar[1]));
				String birthday = ar[2];
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
				Date date = sdf.parse(birthday);
				player.setBirthday(date);
				// 객체를 리스트에 추가
				list.add(player);
			}
			for(Player player : list) {
				System.out.printf("%s\n", player);
			}
			
		}catch(Exception e) {
			System.out.printf("파일 읽기 예외 : %s\n", e.getMessage());
			e.printStackTrace();
		}
	}
}

결과)
Player [name=문채원, age=32, birthday=Thu Nov 13 00:00:00 KST 1986]
Player [name=한효주, age=32, birthday=Sun Feb 22 00:00:00 KST 1987]
Player [name=박보영, age=29, birthday=Mon Feb 12 00:00:00 KST 1990]
Player [name=아이유, age=26, birthday=Sun May 16 00:00:00 KST 1993]

=> 이렇게 직접 읽는 경우의 문제점
=> 첫번째 줄이 항목의 이름이면 에러가 발생할 가능성이 있음
=> 날짜 형식의 데이터가 있는 경우에는 글자 수를 직접 파악해서 변경 작업을 수행해야 합니다.

4. super-csv

- CellProcessor 클래스의 배열을 이용해서 하나의 객체에 대한 제약조건을 설정할 수 있습니다.
- Not Null(), ParseInt, ParseDate, StrRegEx 등이 있습니다.
- ICsvBeanReader 인터페이스를 이용해서 파일의 내용을 읽고 getHeader와 같은 메소드를 이용해서
첫번째 줄의 헤더여부를 설정합니다.

5. 현재 프로젝트의 pom.xml 파일에 super-csv의 의존성을 설정
<!-- https://mvnrepository.com/artifact/net.sf.supercsv/super-csv -->
<dependency>
	<groupId>net.sf.supercsv</groupId>
	<artifactId>super-csv</artifactId>
	<version>2.4.0</version>
</dependency>

6. main 메소드에서 읽어내는 코드를 작성해서 실행
package com.naver.choch92.csv;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import org.supercsv.cellprocessor.ParseDate;
import org.supercsv.cellprocessor.ParseInt;
import org.supercsv.cellprocessor.constraint.NotNull;
import org.supercsv.cellprocessor.ift.CellProcessor;
import org.supercsv.io.CsvBeanReader;
import org.supercsv.io.ICsvBeanReader;
import org.supercsv.prefs.CsvPreference;
public class SuperCsvMain {
	public static void main(String[] args) {
		// 제약조건을 설정
		CellProcessor [] processors = new CellProcessor[] {
			new NotNull(), // 이름은 필수
			new ParseInt(new NotNull()), // 정수로 변환
			new ParseDate("yyyy-MM-dd") // Date로 변환
		};
		// 데이터를 저장할 List 생성
		List <Player> list = new ArrayList<>();
		// 파일 경로를 생성
		Path path = Paths.get("./volley.csv");
		// 읽기
		try(ICsvBeanReader beanReader = new CsvBeanReader(Files.newBufferedReader(path),
				CsvPreference.STANDARD_PREFERENCE)){
			// 헤더 가져오기 - 첫번째 행의 데이터
			String [] header = beanReader.getHeader(true);
			// 두번째 행 부터 읽어오기
			Player player = null;
			// 줄 단위로 읽어서 player로 만든 후 list에 추가
			while((player = beanReader.read(Player.class, header, processors)) != null) {
				list.add(player);
			}
			for(Player temp : list) {
				System.out.printf("%s\n", temp);
			}
		}catch(Exception e) {
			System.out.printf("파일 읽기 예외 : %s\n", e.getMessage());
			e.printStackTrace();
		}
	}
}
결과)
Player [name=문채원, age=32, birthday=Thu Nov 13 00:00:00 KST 1986]
Player [name=한효주, age=32, birthday=Sun Feb 22 00:00:00 KST 1987]
Player [name=박보영, age=29, birthday=Mon Feb 12 00:00:00 KST 1990]
Player [name=아이유, age=26, birthday=Sun May 16 00:00:00 KST 1993]

** JSON Parsing

1. JSON 문법

[ ] : JSONArray - 배열
{ } : JSONObject - 객체
속성과 속성, 객체와 객체를 구분하는 것은 : ,(콤마)
속성과 값을 구분하는 것은 : <-요거

2. JSON 라이브러리

1) JSONArray : JSON 배열
=> 생성자에 JSON 문자열을 대입하면 JSONArray 객체를 생성
=> [ ]로 묶인 문자열을 대입해야 합니다.

JSONObject getJSONObject(int index)
String getString(int index)
int getInt(int index)
int length() : 데이터 개수 리턴

2) JSONObject : JSON 객체
=> 생성자에 JSON 문자열을 대입하면 JSONObject 객체를 생성
=> { }로 묶인 문자열을 대입해야 합니다.

JSONArray getJSONArray(String key)
String getString(String key)
int getInt(String key)

3. Open API 활용

- 대부분의 Open API는 회원가입을 하고 사용하겠다는 신청을 해서 API 키를 받아서 사용합니다.
- API 키를 주소의 뒷부분에 추가해서 요청을 하는 경우가 있고 header에 포함시켜서 요청을 해야 하는 경우가 있음
- 공공기관 Open API는 대부분 key를 주소의 뒷부분에 추가해서 요청하고 Kakao나 Naver같은 곳은 헤더에
포함시켜서 요청을 합니다.

4. Kakao Open API의 JSON 파싱

1) 키를 발급 받기

- developers.kakao.com에 접속하고 로그인(오른쪽 상단)
- 앱만들기 선택 -> 애플리케이션을 생성 
- 위에 완료 후 REST API키를 복사 : abfe30c50bf8646b3518958413f646c1
- 설정 버튼을 클릭하고 플랫폼을 추가 클릭 -> 웹 클릭 -> 사이트 도메인(http://localhost:8080) - 실습용
- API소개 클릭 -> REST API 개발가이드의 검색을 클릭 -> 책 검색 선택

2) 카카오 도서 검색 API
https://dapi.kakao.com/v3/search/book?target=title & query=도서제목
헤더에 인증 키를 추가 : Authorization: KakaoAK 인증키
공공기관 오픈 API는 인증키를 주소에 추가하는데 카카오나 네이버는 보안을 위해서 주소가 아니라 
헤더에 포함시켜서 전송

3) JSON 라이브러리 의존성을 pom.xml에 추가
<!-- https://mvnrepository.com/artifact/org.json/json -->
<dependency>
	<groupId>org.json</groupId>
	<artifactId>json</artifactId>
	<version>20190722</version>
</dependency>

4) main 메소드에 작성해서 데이터를 다운로드 받은 후 JSON 파싱까지 수행

- 웹의 문자열을 다운로드 받을 때는 URL 클래스와 HttpURLConnection클래스를 이용
- URL이 웹 주소를 만드는 클래스이고 URLConnection은 실제 연결해서 요청을 하고 그 결과를 받아오는 클래스
- URL을 만들 때 한글이 포함되어 있으면 인코딩해서 만들어야 합니다.
- URLEncoder.encode(변환할문자열, 인코딩방식)
- 안드로이드에서 위의 작업을 할 때는 스레드를 만들어서 해야 합니다.
- 안드로이드에서는 네트워크 작업을 할 때 스레드를 사용하지 않으면 에러

- Authentication(인증) : 로그인
- Authorization(인가) : 권한

실습) JSON Paring 연습

package com.naver.choch92.json;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import org.json.JSONArray;
import org.json.JSONObject;
public class JSONMain {
	public static void main(String[] args) {
		// 웹의 문자열 가져오기
		String json = "";
		try {
			// 다운로드 받을 주소 생성
			String addr = "https://dapi.kakao.com/v3/search/book?target=title&query="
					+ URLEncoder.encode("삼국지", "utf8");
			URL url = new URL(addr);
			// 연결 객체 생성
			HttpURLConnection con = (HttpURLConnection)url.openConnection();
			// 옵션 설정
			// 최대 30초동안 연결을 시도
			con.setConnectTimeout(30000);
			// 헤더 설정
			con.addRequestProperty("Authorization", "KakaoAK abfe30c50bf8646b3518958413f646c1");
			// 웹에서 문자열을 읽어올 스트림 생성
			BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));
			// 문자열을 일시적으로 저장할 객체 생성
			StringBuilder sb = new StringBuilder();
			while(true) {
				String line = br.readLine();
				if(line == null) {
					break;
				}
				sb.append(line + "\n");
			}
			// 문자열 변수에 대입
			json = sb.toString();
			System.out.printf("%s\n", json);
			
		}catch(Exception e) {
			System.out.printf("%s\n", e.getMessage());
			e.printStackTrace();
		}
		// 파싱
		try {
			// 다운로드 받은 문자열을 JSON 객체로 변환
			JSONObject data = new JSONObject(json);
			// documents 라는 키의 값을 JSONArray로 가져오기
			JSONArray documents = data.getJSONArray("documents");
			// 배열을 순회
			for(int i=0; i<documents.length(); i=i+1) {
				JSONObject item = documents.getJSONObject(i);
				JSONArray authors = item.getJSONArray("authors");
				System.out.printf("%s\n", authors);
			}			
		}catch(Exception e) {
			System.out.printf("JSON 파싱 예외 : %s\n", e.getMessage());
			e.printStackTrace();
		}
	}
}


결과)
결과는 너무 길어서 생략 - 나관중 저자가 먼저 뜨면됨
["나관중"]
["고우영"]
["나관중"]
["마사토끼"]
["장연"]
["나관중"]
["나관중"]
["나관중"]
["나관중"]
["나관중"]

실습) JSON 파싱 연습

=> json api 주소
http://swiftapi.rubypaper.co.kr:2029/hoppin/movies?version=1&page=1&count=20&genreId=&order=releaseddatease
=> 영화제목(title) 과 평점(ratingAverage) 의 값을 가져와서 출력 - 크롬에 주소 복사해서 먼저 살펴보기
package com.naver.choch92.json;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import org.json.JSONArray;
import org.json.JSONObject;
public class JSONMain2 {
	public static void main(String[] args) {
		// 웹의 문자열 가져오기
		String json = "";
		try {
			// 다운로드 받을 주소 생성
			String addr = "http://swiftapi.rubypaper.co.kr:2029/hoppin/movies?version=1&page=1&"
					+ "count=20&genreId=&order=releaseddatease";
			URL url = new URL(addr);
			// 연결 객체 생성
			HttpURLConnection con = (HttpURLConnection) url.openConnection();
			// 옵션 설정
			// 최대 30초동안 연결을 시도
			con.setConnectTimeout(30000);
			// 헤더 설정
			con.addRequestProperty("Authorization", "KakaoAK abfe30c50bf8646b3518958413f646c1");
			// 웹에서 문자열을 읽어올 스트림 생성
			BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));
			// 문자열을 일시적으로 저장할 객체 생성
			StringBuilder sb = new StringBuilder();
			while (true) {
				String line = br.readLine();
				if (line == null) {
					break;
				}
				sb.append(line + "\n");
			}
			// 문자열 변수에 대입
			json = sb.toString();
			System.out.printf("%s\n", json);

		} catch (Exception e) {
			System.out.printf("%s\n", e.getMessage());
			e.printStackTrace();
		}
		// 파싱
		try {
			JSONObject data = new JSONObject(json);
			JSONObject hoppin = data.getJSONObject("hoppin");
			JSONObject movies = hoppin.getJSONObject("movies");
			JSONArray movie = movies.getJSONArray("movie");
			for(int i = 0; i<movie.length(); i=i+1) {
				JSONObject item = movie.getJSONObject(i);
				System.out.printf("%s:%s\n", item.getString("title"), item.getString("ratingAverage"));
			}
		} catch (Exception e) {
			System.out.printf("JSON 파싱 예외 : %s\n", e.getMessage());
			e.printStackTrace();
		}
	}
}
결과)
친정엄마:9.2
포스카인드:7.3
행복한 울릉인:4
허트 로커:8.4
소년은 울지 않는다:6.4
아기와 나:8.6
학원괴담:6
625한국전쟁-3편(동부전선의 고지에도 꽃은 피는가!):6.3
625한국전쟁-2편(중국군의 개입과 장진호 전투):7.2
매트릭스 3 : 레볼루션:8.9
라스트엑소시즘:6.4
미이라:8.8
미이라 2:8.6
헐크:9.1
푸시:7.6
크랙:7.6
잭애스 3D:8.8
삼국지 - 용의 부활:8
아더와 미니모이 2 : 셀레니아 공주 구출 작전:7.9
뭘 또 그렇게까지:8.5

Source Code(고급 프로그래밍 언어로 작성한 텍스트)

Compile(고급 프로그래밍 언어로 작성한 소스 코드가 문법에 맞게 작성되었는지 검사를 하고 맞게 작성되었다면
Virtual Machine 이나 어셈블러가 이해할 수 있는 코드로 변경 - 자바는 Virtual Machine이 이해할 수 있는 중간 코드인
class가 생성됩니다.)

Linking(필요한 라이브러리들과 내가 만든 코드들을 연결)

Build(실행 가능한 프로그램을 만들어 주는 것)

Load(실행 가능한 프로그램을 메모리에 적재)

Run(실행)

=> 코드에는 에러가 없는데 실행이 안되거나 변경된 결과가 반영이 안되면 Rebuild를 하면 됩니다.
